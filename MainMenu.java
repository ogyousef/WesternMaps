import org.json.simple.parser.ParseException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.ArrayList;

/**
 * This class is the main menu page for the program, it allows the user to view the buildings, select them, and go to view them, or delete, or add a new building
 *
 * @author Osama Yousef
 * @author Mustafa Atoof
 */
public class MainMenu extends javax.swing.JFrame {

    /** Arraylist storing buildings loaded in by Main */
    private final ArrayList<Building> buildings;
    /** The graphics object that draws to screen */
    private final Graphics g;
    /** The Building object currently selected */
    private Building selectedBuilding;

    /**
     * Creates new form Main
     */
    public MainMenu() {
        Main.setScreen(4); //sets the new screen value

        initComponents(); //initializes all UI components
        buildings = Main.getBuildings();
        //added mouselistener for mouseclicks to select buildings
        this.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {click(evt);}
        });

        g=this.getGraphics();
        paint(g); //draws the building images to the screen

        createLabels(); //create building labels
        if (Main.getCurrentUserObj().isAdmin())
            createDeleteButton(); //create delete button outside of layout
        else {
            addMap.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        addMap = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        searchResults = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        deleteButton.setText("Add Map");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                try {
                    deleteMapMousePressed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        });

        addMap.setText("Add Map");
        addMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addMapMousePressed(evt);
            }
        });

        logoutButton.setText("Log out");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutButtonMousePressed(evt);
            }
        });

        helpButton.setIcon(new javax.swing.ImageIcon("res/GUIImages/icons8-inquiry-30.png")); // NOI18N
        helpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpButtonMousePressed(evt);
            }
        });

        jButton1.setText("View Building");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jTextField1.setText("Search Bar");

        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                search(evt);
            }
        });
        searchButton.setSize(100, 47);
        searchButton.setLocation(782, 25);
        searchButton.setVisible(true);
        getContentPane().add(searchButton);

        searchResults.setVisible(false);
        getContentPane().add(searchResults);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(addMap, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(289, 289, 289)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(145, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(201, 201, 201)
                                .addComponent(helpButton))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(helpButton)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                        .addComponent(addMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(92, 92, 92)
                                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }

    /**
     * This method deletes a building when the delete map button is pressed and a building has been selected
     * @param evt MouseEvent that triggers this function
     * @throws IOException If the JSON file cannot be found
     * @throws ParseException If the JSON parser cannot read the file
     */
    private void deleteMapMousePressed(MouseEvent evt) throws IOException, ParseException {
        if (selectedBuilding != null){ //if a building is selected, delete
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete selected building?");

            if (confirm == 0){
                Main.deleteBuilding(selectedBuilding); //delete building in main, then refresh the page
                MainMenu mainFrame = new MainMenu();
                mainFrame.setVisible(true);
                dispose();
            }
        }
    }

    /**
     * Method for logout button press, goes back to sign in page
     * @param evt MouseEvent that triggers this function
     */
    private void logoutButtonMousePressed(java.awt.event.MouseEvent evt) {
        Signin signinFrame = new Signin();
        signinFrame.setVisible(true);
        dispose();
    }

    /**
     * Method for help button press, opens up the help page
     * @param evt MouseEvent that triggers this function
     */
    private void helpButtonMousePressed(java.awt.event.MouseEvent evt) {
        Help helpFrame = new Help();
        helpFrame.setVisible(true);
    }

    /**
     * Method for the 'View Buildings' button which takes the user to the map page if a building is selected
     * @param evt MouseEvent that triggers this function
     */
    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {
        if(selectedBuilding != null) {
            Main.setActiveBuilding(selectedBuilding.getBuildingName());
            BuildingMap buildingMapFrame = new BuildingMap();
            buildingMapFrame.setVisible(true);
            dispose();
        }
    }

    /**
     * Method for the add map button, opens up the add map page
     * @param evt MouseEvent that triggers this function
     */
    private void addMapMousePressed(java.awt.event.MouseEvent evt) {

        if (Main.getBuildings().size() == 5){ // max capacity of buildings
            JOptionPane.showMessageDialog(null,"Map limit reached, delete an existing map."); //give error message dialog
        }
        else {
            AddMap addMapFrame = new AddMap();
            addMapFrame.setVisible(true);
            dispose();
        }
    }

    /**
     * This method allows the user to click on the page, if a building is clicked, it will be highlighted and selected
     * @param evt MouseEvent that triggers this function
     */
    private void click(MouseEvent evt) {
        for (Building b : buildings){
            if (b.isSelected(evt.getX(), evt.getY())){
                selectedBuilding = b;
                for (Building c : buildings){
                    if (!c.equals(b)) c.resetSelection();
                }
                //refresh the page
                paint(g);
                paintSelected(g);
            }
        }
    }

    /**
     * Paint method that allows Graphics object to draw the buildings, calls paint method in Building class
     * @param g Graphics
     */
    public void paint(Graphics g) {
        super.paintComponents(g);
        for (Building b : buildings) {
            b.paint(g);
        }
    }

    /**
     * This method is a paint method that highlights the selected building
     * @param g the specified Graphics window
     */
    public void paintSelected(Graphics g){
        for (Building b : buildings) {
            if (b.getIsSelected()) {
                g.setColor(new Color(0, 0, 255, 50));
                g.fillRect(b.getX(), b.getY(), b.getWidth(), b.getHeight());
            }
        }
    }
    /**
     * This method creates the JLabels for each building
     */
    public void createLabels(){
        getContentPane().setLayout(null);
        for (Building b : buildings) {
            JLabel jl = new JLabel(b.getBuildingName());
            getContentPane().add(jl);
            jl.setLocation(b.getX()+b.getWidth()/2 - b.getBuildingName().length()*3,b.getY() - 50);
            jl.setSize(200,15);
        }
    }

    /**
     * This method creates the delete button
     */
    public void createDeleteButton(){
        getContentPane().setLayout(null);
        deleteButton.setText("Delete Map");
        getContentPane().add(deleteButton);
        deleteButton.setLocation(355, 377);
        deleteButton.setSize(200, 66);
        deleteButton.setVisible(true);
    }

    /**
     * Searches the building information using the text in the search bar, and displays the results.
     * @param evt The mouse event that calls this function.
     */
    public void search(MouseEvent evt) {
        String toSearch = jTextField1.getText();

        ArrayList<String> results = Main.searchForMap(toSearch);

        searchResults.setText(String.valueOf(results));
        searchResults.setLocation(108, 78);
        searchResults.setSize(874, 20);
        searchResults.setVerticalTextPosition(SwingConstants.TOP);
        searchResults.setVisible(true);
    }

    /**
     * Method to run this class individually
     * Only would run for quick testing, no exterior functions available
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMap;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchResults;
    // End of variables declaration//GEN-END:variables
}
