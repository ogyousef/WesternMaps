import org.json.simple.parser.ParseException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * This is the add map class, it allows the admin to create a new building for the program by inputting information into the ui components
 * @author Mustafa Atoof
 */
public class AddMap extends javax.swing.JFrame {

    private int currNumberFloors; //current number of floors for the building - taken from a combo box
    private int currEditingFloor; //current floor that the user is adding layers images to - combo box
    private String editFloor[]; //current floor
    private ArrayList<Floor> floorList; //arraylist of floor objects used to create the new building
    private String buildingImgPath; //string that stores the main menu building image file path
    private ArrayList<String> layerImgPaths; //an arraylist of strings that hold the file paths to the layer images
    

    /**
     * Creates new form AddMap
     */
    public AddMap() {
        Main.setScreen(4);
        editFloor = new String[]{"1"}; //the combo box starts at 1
        initializeLayerImagePaths();
        currEditingFloor = 1; // both combo boxes are starting at 1
        currNumberFloors = 1;
        floorList = new ArrayList<>(currNumberFloors);
        initComponents(); //create UI components
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        jDialog1 = new javax.swing.JDialog();
        dialogTitle = new javax.swing.JLabel();
        baseLabel = new javax.swing.JLabel();
        accessFile = new javax.swing.JTextField();
        baseBrowse = new javax.swing.JButton();
        accessLabel = new javax.swing.JLabel();
        baseFile = new javax.swing.JTextField();
        accessBrowse = new javax.swing.JButton();
        washLabel = new javax.swing.JLabel();
        washFile = new javax.swing.JTextField();
        washBrowse = new javax.swing.JButton();
        classLabel = new javax.swing.JLabel();
        classFile = new javax.swing.JTextField();
        classBrowse = new javax.swing.JButton();
        labLabel = new javax.swing.JLabel();
        labFile = new javax.swing.JTextField();
        labBrowse = new javax.swing.JButton();
        restLabel = new javax.swing.JLabel();
        restFile = new javax.swing.JTextField();
        restBrowse = new javax.swing.JButton();
        cancelDialog = new javax.swing.JButton();
        finishDialog = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        buildingImgChoose = new javax.swing.JButton();
        buildingImgLabel = new javax.swing.JLabel();
        filePathText = new javax.swing.JTextField();
        numFloorCombo = new javax.swing.JComboBox<>();
        numFloorsLabel = new javax.swing.JLabel();
        buildingNameLabel = new javax.swing.JLabel();
        buildingNameText = new javax.swing.JTextField();
        createFloors = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        editFloorLabel = new javax.swing.JLabel();
        editFloorCombo = new javax.swing.JComboBox<>();
        floorLabel = new javax.swing.JLabel();
        finishButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        //setResizable(false);

        dialogTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dialogTitle.setText("Add Layers");

        baseLabel.setText("Base Layer");

        baseBrowse.setText("Browse...");
        baseBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                baseFile.setText(FileChooseMousePressed(evt));
            }
        });

        accessLabel.setText("Accessibility");

        accessBrowse.setText("Browse...");
        accessBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                accessFile.setText(FileChooseMousePressed(evt));
            }
        });

        washLabel.setText("Washroom");

        washBrowse.setText("Browse...");
        washBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                washFile.setText(FileChooseMousePressed(evt));
            }
        });

        classLabel.setText("Classroom");


        classBrowse.setText("Browse...");
        classBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                classFile.setText(FileChooseMousePressed(evt));
            }
        });

        labLabel.setText("Laboratory");

        labBrowse.setText("Browse...");
        labBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labFile.setText(FileChooseMousePressed(evt));
            }
        });

        restLabel.setText("Restaurant");

        restBrowse.setText("Browse...");
        restBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FileChooseMousePressed(evt);
            }
        });

        finishDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                finishDialogMousePressed(evt);
            }
        });

        cancelDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
               cancelDialogMousePressed(evt);
            }
        });

        cancelDialog.setText("Cancel");

        finishDialog.setText("Finish");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
                jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDialog1Layout.createSequentialGroup()
                                .addGap(215, 215, 215)
                                .addComponent(dialogTitle)
                                .addContainerGap(231, Short.MAX_VALUE))
                        .addGroup(jDialog1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jDialog1Layout.createSequentialGroup()
                                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(accessLabel)
                                                        .addComponent(washLabel)
                                                        .addComponent(baseLabel)
                                                        .addComponent(classLabel)
                                                        .addComponent(labLabel)
                                                        .addComponent(restLabel))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(restFile, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                                                        .addComponent(labFile)
                                                        .addComponent(classFile)
                                                        .addComponent(baseFile)
                                                        .addComponent(washFile)
                                                        .addComponent(accessFile)))
                                        .addComponent(cancelDialog))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(baseBrowse)
                                        .addComponent(accessBrowse)
                                        .addComponent(washBrowse)
                                        .addComponent(classBrowse)
                                        .addComponent(labBrowse)
                                        .addComponent(restBrowse)
                                        .addComponent(finishDialog))
                                .addGap(15, 15, 15))
        );
        jDialog1Layout.setVerticalGroup(
                jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDialog1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(dialogTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(baseLabel)
                                        .addComponent(baseBrowse)
                                        .addComponent(baseFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(accessLabel)
                                        .addComponent(accessFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(accessBrowse))
                                .addGap(18, 18, 18)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(washLabel)
                                        .addComponent(washFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(washBrowse))
                                .addGap(18, 18, 18)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(classLabel)
                                        .addComponent(classFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(classBrowse))
                                .addGap(18, 18, 18)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labLabel)
                                        .addComponent(labFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labBrowse))
                                .addGap(18, 18, 18)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(restLabel)
                                        .addComponent(restFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(restBrowse))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(finishDialog)
                                        .addComponent(cancelDialog))
                                .addGap(37, 37, 37))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 450));

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Add a Building");

        buildingImgChoose.setText("Browse...");
        buildingImgChoose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                filePathText.setText(FileChooseMousePressed(evt));
            }
        });

        buildingImgLabel.setText("Building Image:");

        editFloorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(editFloor));
        editFloorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFloorComboActionPerformed(evt);
            }
        });
        cancelDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt){
                cancelDialogMousePressed(evt);
            }
        });
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt)  {
                cancelMousePressed(evt);
            }
        });
        finishButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                try {
                    finishButtonMousePressed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
    });
        createFloors.addMouseListener(new java.awt.event.MouseAdapter(){
            public void mousePressed(java.awt.event.MouseEvent evt) {
                createFloorsMousePressed(evt);
            }
        });

        buildingImgLabel.setText("Building Image:");

        numFloorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        numFloorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numFloorComboActionPerformed(evt);
            }
        });

        numFloorsLabel.setText("Number of Floors:");

        buildingNameLabel.setText("Building Name:");

        createFloors.setText("Create Floor");

        cancel.setText("Cancel");

        editFloorLabel.setText("Create/Edit Floor Layers");

        floorLabel.setText("Floor:");

        finishButton.setText("Finish");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(296, 296, 296)
                                                .addComponent(title))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(numFloorsLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(numFloorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(buildingNameLabel)
                                                                        .addComponent(buildingImgLabel))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(filePathText)
                                                                        .addComponent(buildingNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(buildingImgChoose))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(cancel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(finishButton)))))
                                .addGap(14, 14, 14))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(floorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(editFloorLabel)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(editFloorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(createFloors)))
                                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(title)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buildingNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(buildingNameLabel))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(filePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(buildingImgLabel)
                                        .addComponent(buildingImgChoose))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numFloorsLabel)
                                        .addComponent(numFloorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                                .addComponent(editFloorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(editFloorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(createFloors)
                                        .addComponent(floorLabel))
                                .addGap(136, 136, 136)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cancel)
                                        .addComponent(finishButton))
                                .addGap(19, 19, 19))
        );

        pack();
        setLocationRelativeTo(null);

    }

    /**
     * Method that gives an error dialog if the user puts in wrong input
     * @param errorMessage String
     */
    private void errorDialog(String errorMessage){
        JOptionPane.showMessageDialog(Main.getGraphics(),errorMessage);
    }

    /**
     *This method checks that the filepaths in the file textboxes are valid images
     * @param filePath this is the textfield ui component
     * @param layerList list of bufferedimages
     * @param index Integer location of element to replace
     * @return true if image and filepath are valid, else false
     */
    private boolean textBoxImgCheck(JTextField filePath, ArrayList<BufferedImage> layerList, int index){
        BufferedImage Img = loadImage(filePath.getText()); //load image from file path
        if (Img==null) { // if image does not load
            if(filePath.getText().length()==0 && !filePath.equals(baseFile)) { //a floor can have no non-base layers, so add null to layerlist
                layerList.add(null); return true;
            }
            else if (filePath.getText().length()==0 && filePath.equals(baseFile)) { //this is if the base layer is empty, give an error, because a floor must have a base
                errorDialog("ERROR: Must include base image."); return false;
            }
            else { // else a file path is invalid
                errorDialog("Error: Check layer file paths."); return false;
            }
        }
        else { // else the image has loaded correctly
            layerImgPaths.set(index, filePath.getText()); //send the file path to the arraylist with correct index, as the floors may not be created in correct order
            layerList.add(Img); return true; //add the image to the layer list
        }
    }

    /**
     * When the finish button for the floor layers is pressed, validates layer image paths
     * Then adds the images and creates the floor object
     * @param evt MouseEvent that triggers this function
     */
    private void finishDialogMousePressed(MouseEvent evt) {
        ArrayList<BufferedImage> layerList = new ArrayList<>(); //refresh the list for new floor

        //validate all layer images
        textBoxImgCheck(baseFile, layerList, 0);
        textBoxImgCheck(accessFile, layerList, 1);
        textBoxImgCheck(washFile,layerList, 2);
        textBoxImgCheck(classFile,layerList, 3);
        textBoxImgCheck(labFile, layerList, 4);
        textBoxImgCheck(restFile, layerList, 5);

        if (layerList.size()<6) return; //

        Floor f = new Floor(currEditingFloor,150,50,960,700, layerList);
        f.setImgLayerPaths(layerImgPaths); //set the layer image list in floor object
        floorList.add(f); //add the new floor to the floorlist
        refreshDialog();
    }

    /**
     * This method loads an image from a filepath
     * @param fn String that holds a filename
     * @return image BufferedImage
     */
    private BufferedImage loadImage(String fn) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(fn));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return image;
    }

    /**
     * Functionality for when create floors button is pressed, creates a dialog box where user can input layer images
     * @param evt MouseEvent
     */
    private void createFloorsMousePressed(MouseEvent evt) {
        initializeLayerImagePaths(); //reset the layerImagePaths
        jDialog1.setVisible(true);
        jDialog1.setSize(500,425);
        jDialog1.setLocationRelativeTo(null);

    }

    /**
     * When user changes a combobox for edit floor, changes the variable
     * @param evt ActionEvent
     */
    private void editFloorComboActionPerformed(ActionEvent evt) {
        currEditingFloor = Integer.parseInt((String) editFloorCombo.getSelectedItem());
    }

    /**
     * Functionality for when a user presses the finish button, which creates the new building
     * @param evt MouseEvent that triggers this function
     * @throws IOException If JSON file cannot be found when writing to file
     * @throws ParseException If the JSON parser cannot read the file
     */
    private void finishButtonMousePressed(MouseEvent evt) throws IOException, ParseException {
        Building b;
        String buildingName;
        BufferedImage buildImg = null;
        if (buildingNameText.getText().length() >= 3){
           buildingName = buildingNameText.getText();
        }
        else {
            errorDialog("Error: Building name too short");
            return;
        }

        if (filePathText.getText()!=""){
            buildingImgPath = filePathText.getText();
            buildImg = loadImage(filePathText.getText());
        }

        if (buildImg!=null && buildingName!=null && floorList.size() == currNumberFloors) {
            ArrayList<Floor> sortedFloors = new ArrayList<>(floorList.size());

            //have to sort the floor list as the floors could be created in any order, must order them back
            for(int i =0;i<floorList.size();i++){
                for(int j = 0; j<floorList.size();j++){
                    if(floorList.get(j).getFloorNumber()==(i+1)){
                        sortedFloors.add(floorList.get(j));
                        break;
                    }
                }
            }
            //create the new building object
            b = new Building(sortedFloors, buildingName, buildImg, 1200 / (Main.getBuildings().size() + 2) + 200*Main.getBuildings().size(), 200, 200, 200, 4);
            Main.getBuildings().add(b); //add building to the building list
            
            Main.recalculateBuildingPositions();
            Main.saveBuilding(buildingImgPath); //save new building to json
            MainMenu mainFrame = new MainMenu(); //go back to main menu screen
            mainFrame.setVisible(true);
            dispose();
        }
        //error messages
        if(buildImg==null) errorDialog("Error: Building Image not found.");
        if(floorList.size() != currNumberFloors) errorDialog("Error: Must create all floors.");

    }

    /**
     * This method is called when user changes the number floor combo box, changes floor variables according to new number
     * @param evt MouseEvent that triggers this function
     */
    private void numFloorComboActionPerformed(java.awt.event.ActionEvent evt) {
        currNumberFloors = Integer.parseInt((String) numFloorCombo.getSelectedItem());
        editFloor = new String[currNumberFloors];

        for (int i = 1; i <= currNumberFloors; i++){ //changes the input of the edit floor combo box so that user can only create the number of floors that building contains
            editFloor[i-1] = Integer.toString(i);
        }

        editFloorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(editFloor));
        floorList = new ArrayList<>(currNumberFloors);
    }

    /**
     * This method is for the file browse buttons that chooses a file to use as an image
     * @param evt MouseEvent that triggers this function
     * @return String of the filepath of the map image
     */
    private String FileChooseMousePressed(java.awt.event.MouseEvent evt) {
        JFileChooser mapFile = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("PNG FILES", "png");
        mapFile.setFileFilter(filter);

        mapFile.setCurrentDirectory(new File(".")); //set current directory to the project folder
        int response = mapFile.showSaveDialog(null);

        if (response == mapFile.APPROVE_OPTION){ //if valid
            File filex = new File(mapFile.getSelectedFile().getAbsolutePath()); //get absolute path of file

            var pwd = Paths.get("").toAbsolutePath();
            String filepath = pwd.relativize(Paths.get(String.valueOf(filex))).toString(); //change the file path to relative from res folder
            return filepath;
        }
        return "";
    }

    /**
     * This method resets all the filepaths in the textboxes when the floor dialog is closed
     * So that the next floor will have fresh layer lists
     */
    private void refreshDialog(){
        jDialog1.dispose();
        baseFile.setText("");
        classFile.setText("");
        washFile.setText("");
        accessFile.setText("");
        labFile.setText("");
        restFile.setText("");
    }

    /**
     * This method resets the layerImagePaths list when a new floor is done
     */
    private void initializeLayerImagePaths(){
        layerImgPaths = new ArrayList<>(6);
        for (int i = 0; i < 6; i++){
            layerImgPaths.add("");
        }
    }

    /**
     * This method refreshes the dialog box and closes it when user presses cancel button in the floor dialog
     * @param evt MouseEvent that triggers this function
     */
    private void cancelDialogMousePressed(java.awt.event.MouseEvent evt){
        refreshDialog();
    }

    /**
     * This method closes the add map screen and goes to main menu when user presses cancel button
     * @param evt MouseEvent that triggers this function
     */
    private void cancelMousePressed(java.awt.event.MouseEvent evt){
        MainMenu mainFrame = new MainMenu();
        mainFrame.setVisible(true);
        dispose();
    }

    /**
     * Method to run this class individually
     * Only would run for quick testing, no exterior functions available
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddMap().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton accessBrowse;
    private javax.swing.JTextField accessFile;
    private javax.swing.JLabel accessLabel;
    private javax.swing.JButton baseBrowse;
    private javax.swing.JTextField baseFile;
    private javax.swing.JLabel baseLabel;
    private javax.swing.JButton buildingImgChoose;
    private javax.swing.JLabel buildingImgLabel;
    private javax.swing.JLabel buildingNameLabel;
    private javax.swing.JTextField buildingNameText;
    private javax.swing.JButton cancel;
    private javax.swing.JButton cancelDialog;
    private javax.swing.JButton classBrowse;
    private javax.swing.JTextField classFile;
    private javax.swing.JLabel classLabel;
    private javax.swing.JButton createFloors;
    private javax.swing.JLabel dialogTitle;
    private javax.swing.JComboBox<String> editFloorCombo;
    private javax.swing.JLabel editFloorLabel;
    private javax.swing.JTextField filePathText;
    private javax.swing.JButton finishButton;
    private javax.swing.JButton finishDialog;
    private javax.swing.JLabel floorLabel;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JButton labBrowse;
    private javax.swing.JTextField labFile;
    private javax.swing.JLabel labLabel;
    private javax.swing.JComboBox<String> numFloorCombo;
    private javax.swing.JLabel numFloorsLabel;
    private javax.swing.JButton restBrowse;
    private javax.swing.JTextField restFile;
    private javax.swing.JLabel restLabel;
    private javax.swing.JLabel title;
    private javax.swing.JButton washBrowse;
    private javax.swing.JTextField washFile;
    private javax.swing.JLabel washLabel;
    // End of variables declaration
}
