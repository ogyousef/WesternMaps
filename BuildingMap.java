import org.json.simple.parser.ParseException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;

/**
 * Graphics screen for viewing the map of a building's floors
 * @author Osama Yousef
 * @author Jacob Smith
 * @version 1.0
 */
public class BuildingMap extends javax.swing.JFrame {

    /** Arraylist of all buildings created in Main class */
    private ArrayList<Building> buildings;
    /** Graphics object used for drawing to screen */
    private Graphics g;
    /** The currently selected POI, if there is one */
    private POI selectedPOI = null; //will hold the POI object that has been selected latest
    /** Boolean to check if the user is currently adding a POI */
    private boolean addingPoi = false; //boolean the adding poi button
    /** Boolean active while user is actively adding a POI */
    private boolean activeAdding = false; // boolean to track the adding process
    /** X coordinate of POI in use */
    private int poiX;
    /** Y position of POI in use */
    private int poiY;
    /** List of POI's on the floor */
    private final DefaultListModel model = new DefaultListModel();
    /** List of POI's on the floor that are favourited */
    private final DefaultListModel model2 = new DefaultListModel();

    /**
     * Creates new form BuildingMap
     */
    public BuildingMap() {
        Main.setScreen(5);
        Main.resetActiveFloor();
        initComponents();

        this.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {click(evt);}
        });
        buildings = Main.getBuildings();
        g = this.getGraphics();
        if (checkbox1.getState()) Main.toggleLayer(1, true);
        else Main.toggleLayer(1, false);
        if (checkbox2.getState()) Main.toggleLayer(2, true);
        else Main.toggleLayer(2, false);
        if (checkbox3.getState()) Main.toggleLayer(3, true);
        else Main.toggleLayer(3, false);
        if (checkbox4.getState()) Main.toggleLayer(4, true);
        else Main.toggleLayer(4, false);
        if (checkbox5.getState()) Main.toggleLayer(5, true);
        else Main.toggleLayer(5, false);
        paint(g);
        displayPOIinJlist();
        displayFavourites();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        checkbox1 = new java.awt.Checkbox();
        checkbox2 = new java.awt.Checkbox();
        checkbox3 = new java.awt.Checkbox();
        checkbox4 = new java.awt.Checkbox();
        checkbox5 = new java.awt.Checkbox();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        FindButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        findFav = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1370, 850));
        setResizable(false);
        getContentPane().setLayout(null);


        jLabel1.setText(Main.getActiveBuilding());
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 170, 30);

        helpButton.setIcon(new javax.swing.ImageIcon("res/GUIImages/icons8-inquiry-30.png")); // NOI18N
        helpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpButtonMousePressed(evt);
            }
        });
        getContentPane().add(helpButton);
        helpButton.setBounds(1270, 0, 100, 54);getContentPane().add(helpButton);
        helpButton.setBounds(1270, 0, 100, 54);
        getContentPane().add(jLabel1);

        jLabel1.setBounds(10, 20, 170, 30);

        backButton.setIcon(new javax.swing.ImageIcon("res/GUIImages/icons8-back-arrow-48.png")); // NOI18N
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backButtonMousePressed(evt);
            }
        });
        getContentPane().add(backButton);
        backButton.setBounds(1160, 0, 110, 54);

        checkbox1.setLabel("Accessibility Layer");
        getContentPane().add(checkbox1);
        checkbox1.setBounds(10, 60, 150, 20);
        checkbox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                accCheckPressed(evt);
            }
        });

        checkbox2.setLabel("Washrooms");
        getContentPane().add(checkbox2);
        checkbox2.setBounds(10, 90, 140, 20);
        checkbox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                washCheckPressed(evt);
            }
        });

        checkbox3.setLabel("Classrooms");
        getContentPane().add(checkbox3);
        checkbox3.setBounds(10, 120, 140, 20);
        checkbox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                classCheckPressed(evt);
            }
        });

        checkbox4.setLabel("Labs");
        getContentPane().add(checkbox4);
        checkbox4.setBounds(10, 150, 150, 20);
        checkbox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labCheckPressed(evt);
            }
        });

        checkbox5.setLabel("Restaurants");
        getContentPane().add(checkbox5);
        checkbox5.setBounds(10, 180, 140, 20);
        checkbox5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                restCheckPressed(evt);
            }
        });


        jTextField1.setText("Search");
        getContentPane().add(jTextField1);
        jTextField1.setBounds(310, 10, 580, 23);

        jButton1.setText("Logout");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(1180, 70, 170, 30);

        jTextPane1.setText("POI Description");
        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(1170, 140, 190, 130);

        jLabel2.setText("Current Floor:" + Main.getActiveFloor());
        getContentPane().add(jLabel2);
        jLabel2.setBounds(1170, 600, 180, 30);

        upButton.setIcon(new javax.swing.ImageIcon("res/GUIImages/Arrow-up.png"));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        getContentPane().add(upButton);
        upButton.setBounds(1230, 640, 80, 70);

        downButton.setIcon(new javax.swing.ImageIcon("res/GUIImages/Arrows-Down-icon.png"));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {downButtonActionPerformed(evt);}
        });
        getContentPane().add(downButton);
        downButton.setBounds(1230, 720, 80, 70);

        jButton2.setText("Add POI");
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 400, 170, 41);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPoiButtonActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(10, 400, 170, 41);

        jButton3.setText("Add Favourite");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favouriteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(10, 690, 170, 50);

        FindButton.setText("Find POI");
        getContentPane().add(FindButton);
        FindButton.setBounds(10, 750, 170, 50);


        FindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPOIfromJlist();
            }
        });

        jLabel6 = new javax.swing.JLabel();

        jLabel6.setText("Add POI Description");

        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 280, 170, 17);

        jLabel3.setText("Add POI");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(70, 210, 70, 40);

        jButton4.setText("Start");
        getContentPane().add(jButton4);
        jButton4.setBounds(10, 240, 80, 40);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jButton5.setText("Cancel");
        getContentPane().add(jButton5);
        jButton5.setBounds(100, 240, 80, 40);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jTextPane2.setText("       POI Description");
        jScrollPane2.setViewportView(jTextPane2);
        jTextPane2.setEditable(false);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 300, 170, 100);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList1);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 460, 170, 160);

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList2);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(1170, 310, 190, 190);

        jButton6.setText("Delete POI");
        getContentPane().add(jButton6);
        jButton6.setBounds(10, 640, 170, 40);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    deletePoiActionPerformed(evt);
                } catch (IOException e) {
                    System.out.println("IOE");
                    throw new RuntimeException(e);
                } catch (ParseException e) {
                    System.out.println("RunTime");
                    throw new RuntimeException(e);
                }

            }
        });

        jLabel4.setText("Favourite List");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(1220, 290, 90, 17);

        jButton7.setText("Delete Favourite");
        getContentPane().add(jButton7);
        jButton7.setBounds(1190, 510, 160, 30);

        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    deleteFavActionPreformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } catch (ParseException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        findFav.setText("Find Favourite");
        getContentPane().add(findFav);
        findFav.setBounds(1190, 560, 160, 30);
        findFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPOIfromFavourites();
            }
        });

        jLabel5.setText("POI Description");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(1210, 110, 100, 17);

        pack();
        setLocationRelativeTo(null);
    }

    /**
     * Function called when pressing button to delete a favourite
     *      Finds the favourite
     *      Confirms which user owns it
     *      Deletes favourite from active user memory
     *      Deletes favourite from users.json
     * @param evt Button pressed event that triggers the function
     * @throws IOException If the JSON file cannot be found
     * @throws ParseException If the JSON parser cannot read the file
     */
    private void deleteFavActionPreformed(ActionEvent evt) throws IOException, ParseException {
        if (!jList2.isSelectionEmpty()) {
            String selected = jList2.getSelectedValue();
            for (user u: Main.users) {
                if (u.getUserName().equals(Main.getCurrentUser())) {
                    for (Building b: Main.getBuildings()) {
                        if (b.getBuildingName().equals(Main.getActiveBuilding())) {
                            for (Floor f: b.getFloorList()) {
                                if (f.getFloorNumber() == Main.getActiveFloor()) {
                                    for (POI p: f.getPOIs()) {
                                        if (p.getMetadata().equals(selected)) {
                                            int[] favlist = u.getFavouriteList();
                                            for (int i = 0; i < favlist.length; i++) {
                                                if (p.getID() == favlist[i]) {
                                                    Main.deleteFavourites(p.getID());
                                                    u.removeFavourite(p.getID());
                                                }
                                            }
                                            displayPOIinJlist();
                                            displayFavourites();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    paint(g);
                }
            }
        }
    }

    /**
     * Function to delete a POI from the active floor and the JSON file
     * @param evt MouseEvent that triggers this function
     * @throws IOException If the JSON file cannot be found
     * @throws ParseException If the JSON parser cannot read the file
     */
    private void deletePoiActionPerformed(ActionEvent evt) throws IOException, ParseException {
        displayFavourites();
        if(selectedPOI!=null){
            for (user u: Main.users) {
                if (u.getUserName().equals(Main.getCurrentUser())) {
                    u.removePoi(selectedPOI.getID());
                    Main.removePOI(selectedPOI.getID());
                    displayPOIinJlist();
                    paint(g);
                }
            }
        }

        else if (!jList1.isSelectionEmpty()){
            String selected = jList1.getSelectedValue();
            for (user u: Main.users) {
                if (u.getUserName().equals(Main.getCurrentUser())) {
                    for (POI p:u.getPointsOfInterest()) {
                        if (p.getMetadata().equals(selected)) {
                            u.removePoi(p.getID());
                            paint(g);
                            Main.removePOI(p.getID());
                            displayPOIinJlist();
                        }
                    }
                }
            }
        }
    }

    /**
     * Function to bring up the help menu from Help.java
     * @param evt MouseEvent that triggers this function
     */
    private void helpButtonMousePressed(java.awt.event.MouseEvent evt) {
        Help helpFrame = new Help();
        helpFrame.setVisible(true);
    }

    /**
     * Function to close this window and return to MainMenu
     * @param evt MouseEvent that triggers this function
     */
    private void backButtonMousePressed(java.awt.event.MouseEvent evt) {
        MainMenu mainFrame = new MainMenu();
        mainFrame.setVisible(true);
        dispose();
    }

    /**
     * Function to log out
     * Close this window and open the graphics window
     * @param evt MouseEvent that triggers this function
     */
    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {
        Signin signinFrame = new Signin();
        signinFrame.setVisible(true);
        dispose();
    }

    /**
     * Function to go up one floor
     * Increases floor by 1 if valid, else nothing
     * @param evt MouseEvent that triggers this function
     */
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {
        jTextPane1.setText("POI Description"); //reset description box
        selectedPOI = null; //previously selected POIs do not stay selected when you change floors
        boolean status = Main.changeFloor(1); //tell main to go up one floor
        if (status) {
            jLabel2.setText("Current Floor:" + Main.getActiveFloor());
            //Keep checkbox toggles on for new floor
            if (checkbox1.getState()) Main.toggleLayer(1, true);
            else Main.toggleLayer(1, false);
            if (checkbox2.getState()) Main.toggleLayer(2, true);
            else Main.toggleLayer(2, false);
            if (checkbox3.getState()) Main.toggleLayer(3, true);
            else Main.toggleLayer(3, false);
            if (checkbox4.getState()) Main.toggleLayer(4, true);
            else Main.toggleLayer(4, false);
            if (checkbox5.getState()) Main.toggleLayer(5, true);
            else Main.toggleLayer(5, false);
            displayPOIinJlist();
            displayFavourites();
            paint(g); //only refresh if successfully changed
        }
    }

    /**
     * Function to add a selected POI to the user's list of favourites
     * @param evt MouseEvent that triggers this function
     */
    private void favouriteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedPOI != null) {
            ArrayList<user> users = Main.getUsers();
            for (user u: users) { //check for the right user
                //when the correct user is located, add this POI id to their favourites
                if (u.getUserName().equals(Main.getCurrentUser())) {
                    for (int i: u.getFavouriteList()) {
                        if (i == selectedPOI.getID()) return; //don't let user favourite same thing twice
                    }
                    u.addFavourites(selectedPOI.getID());
                    try {
                        Main.addFavourite(selectedPOI.getID()); //write the new id to the users json
                    }
                    catch (IOException | ParseException ex) {
                        ex.printStackTrace();
                    }
                    displayFavourites();
                }
            }
        }
    }

    /**
     * Function to go down one floor
     * Decreases floor by 1 if valid, else nothing
     * @param evt MouseEvent that triggers this function
     */
    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {
        jTextPane1.setText("POI Description"); //reset description box
        selectedPOI = null; //previously selected POIs do not stay selected when you change floors
        boolean status = Main.changeFloor(-1);
        if (status) {
            jLabel2.setText("Current Floor:" + Main.getActiveFloor());
            if (checkbox1.getState()) Main.toggleLayer(1, true);
            else Main.toggleLayer(1, false);
            if (checkbox2.getState()) Main.toggleLayer(2, true);
            else Main.toggleLayer(2, false);
            if (checkbox3.getState()) Main.toggleLayer(3, true);
            else Main.toggleLayer(3, false);
            if (checkbox4.getState()) Main.toggleLayer(4, true);
            else Main.toggleLayer(4, false);
            if (checkbox5.getState()) Main.toggleLayer(5, true);
            else Main.toggleLayer(5, false);
            displayPOIinJlist();
            displayFavourites();
            paint(g);
        }
    }

    /**
     * Function to activate the accessibility layer
     * @param evt MouseEvent that triggers this function
     */
    private void accCheckPressed(MouseEvent evt) {
        jTextPane1.setText("POI Description");
        Main.toggleLayer(1, !checkbox1.getState());
        paint(g);
    }

    /**
     * Function to activate the washroom layer
     * @param evt MouseEvent that triggers this function
     */
    private void washCheckPressed(MouseEvent evt) {
        jTextPane1.setText("POI Description");
        Main.toggleLayer(2, !checkbox2.getState());
        paint(g);
    }

    /**
     * Function to activate the classroom layer
     * @param evt MouseEvent that triggers this function
     */
    private void classCheckPressed(MouseEvent evt) {
        jTextPane1.setText("POI Description");
        Main.toggleLayer(3, !checkbox3.getState());
        paint(g);
    }

    /**
     * Function to activate the laboratory layer
     * @param evt MouseEvent that triggers this function
     */
    private void labCheckPressed(MouseEvent evt) {
        jTextPane1.setText("POI Description");
        Main.toggleLayer(4, !checkbox4.getState());
        paint(g);
    }

    /**
     * Function to activate the restaurant layer
     * @param evt MouseEvent that triggers this function
     */
    private void restCheckPressed(MouseEvent evt) {
        jTextPane1.setText("POI Description");
        Main.toggleLayer(5, !checkbox5.getState());
        paint(g);
    }

    /**
     * Function to update the list of POI's on this floor
     */
    private void displayPOIinJlist(){
        displayFavourites();
        jList1.setModel(model);
        model.removeAllElements();

        for (user u: Main.users) {
            if (u.getUserName().equals(Main.getCurrentUser())) {
                for (Building b : Main.getBuildings()) {
                    if (b.getBuildingName().equals(Main.getActiveBuilding())) {
                        for (Floor f : b.getFloorList()) {
                            if (f.getFloorNumber() == Main.getActiveFloor()) {
                                for (POI p : f.getPOIs()) {
                                    if(Main.userHasPoi(p))model.addElement(p.getMetadata());
                                }
                                for (POI p2 : f.getDefaultPOI()) {
                                    model.addElement(p2.getMetadata());
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Highlight and select a POI that appears in the JList
     * User clicks the POI name, then clicks "Find POI"
     */
    private void findPOIfromJlist(){
        for (Building b : Main.getBuildings()) { //for each building
            if (b.getBuildingName().equals(Main.getActiveBuilding())) { //if correct building
                for (Floor f : b.getFloorList()) { //for each floor in correct building
                    if (f.getFloorNumber() == Main.getActiveFloor()) { //if correct floor
                        for (POI p : f.getPOIs()) { //for each POI in correct floor
                             if(p.getMetadata().equals(jList1.getSelectedValue())) {
                                selectedPOI = p;
                                selectedPOI.highlighted();
                                paint(g);
                                p.unhighlighted();
                             }
                        }
                    }
                }
            }
        }
    }

    /**
     * Highlight and select a POI that appears in the favourites JList
     * User clicks the POI name, then clicks "Find POI"
     */
    private void findPOIfromFavourites() {
        for (user u : Main.users) {
            if (u.getUserName().equals(Main.getCurrentUser())) {
                for (Building b : Main.getBuildings()) { //for each building
                    if (b.getBuildingName().equals(Main.getActiveBuilding())) { //if correct building
                        for (Floor f : b.getFloorList()) { //for each floor in correct building
                            if (f.getFloorNumber() == Main.getActiveFloor()) { //if correct floor
                                for (POI p : f.getPOIs()) { //for each POI in correct floor
                                    if (Main.userHasPoi(p) || p.getID() < 2000) {
                                        int[] favlist = u.getFavouriteList();
                                        for (int x = 0; x < favlist.length; x++) {
                                            if (p.getID() == favlist[x]) {
                                                if (p.getMetadata().equals(jList2.getSelectedValue())) {
                                                    selectedPOI = p;
                                                    selectedPOI.highlighted();
                                                    paint(g);
                                                    p.unhighlighted();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Function to update the list of favourites
     */
    private void displayFavourites(){
        jList2.setModel(model2);
        model2.removeAllElements();
        for (user u: Main.users) {
            if (u.getUserName().equals(Main.getCurrentUser())) {
                for (Building b : Main.getBuildings()) {
                    if (b.getBuildingName().equals(Main.getActiveBuilding())) {
                        for (Floor f : b.getFloorList()) {
                            if (f.getFloorNumber() == Main.getActiveFloor()) {
                                for (POI p : f.getPOIs()) {
                                    if (Main.userHasPoi(p) || p.getID() < 2000) {
                                        int[] favlist = u.getFavouriteList();
                                        for (int x=0;x<favlist.length;x++) {
                                            if (p.getID() == favlist[x]) {
                                                model2.addElement(p.getMetadata());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Function for all actions performed from clicking something that is not a Swing component
     * This includes selecting a POI and adding new POIs
     * @param evt MouseEvent that triggers this function
     */
    private void click(MouseEvent evt) {
        if (!addingPoi) { //if you're not adding a poi
            for (Building b : Main.getBuildings()) { //for each building
                if (b.getBuildingName().equals(Main.getActiveBuilding())) { //if correct building
                    for (Floor f : b.getFloorList()) { //for each floor in correct building
                        if (f.getFloorNumber() == Main.getActiveFloor()) { //if correct floor
                            for (POI p : f.getPOIs()) { //for each POI in correct floor
                                if (p.isSelected(evt.getX(), evt.getY()) && (Main.userHasPoi(p) || p.getID() < 2000)) { //if the poi is clicked
                                    jTextPane1.setText(p.getMetadata()); //change description to this poi
                                    selectedPOI = p;
                                    selectedPOI.highlighted();
                                    paint(g);
                                    p.unhighlighted();
                                }
                                else {
                                    p.unhighlighted();
                                    jList1.clearSelection();
                                    jList2.clearSelection();
                                }
                            }
                        }
                    }
                }
            }
        }
        else if(evt.getX() > 200 && evt.getX() < 1000 && evt.getY() > 70 && evt.getY() < 800 ) {
             addingPoi = false;
             poiX = evt.getX() - 10;
             poiY = evt.getY() - 28;
             g.drawImage(Main.poiImage,poiX,poiY,20,29,this);
        }
    }

    /**
     * Function to finish adding a POI to a map
     * Requires user to press start, click a location, and write a description
     * @param evt MouseEvent that triggers this function
     */
    private void addPoiButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if(activeAdding && jTextPane2.getText().equals("")){
            jTextPane2.setEditable(false);
            jTextPane2.setText("Description can not be empty!\n Please Add Description.");

            activeAdding = false;
            jTextPane2.setEditable(false);
            jButton5.setBackground(new JButton().getBackground());
            jButton4.setBackground(new JButton().getBackground());
            displayPOIinJlist();
            paint(g);
            return;
        }
        if (activeAdding && !(jTextPane2.getText().equals(""))){
            model.removeAllElements();
            jButton2.setBackground(new Color(200, 100, 70));
            int poiID = Main.getNextID();
            POI newPoi = new POI(poiID, poiX, poiY, 20, 28, Main.poiImage, 5, jTextPane2.getText());
            buildings = Main.getBuildings();
            for (Building b: buildings) {
                if (b.getBuildingName().equals(Main.getActiveBuilding())) {
                    ArrayList<Floor> floors = b.getFloorList();
                    for (Floor f : floors) {
                        if (f.getFloorNumber() == Main.getActiveFloor()) {
                            //now check to see if not overlapping with another poi
                            for (POI p: f.getPOIs()) {
                                if (Main.userHasPoi(p) || p.getID() < 2000) {
                                    if ((p.isSelected(poiX, poiY) || p.isSelected(poiX + 20, poiY)
                                            || p.isSelected(poiX, poiY + 28) || p.isSelected(poiX + 20, poiY + 28))) {
                                        return; //leave the function if there is any overlap
                                        //intersection is more complex for two rectangles, since they can intersect from four different angles
                                    }
                                }
                            }
                            //if no overlapping, add the poi to the floor
                            f.addPOI(newPoi);
                            //then add poi to user object
                            Main.addPOItoUser(newPoi);
                            //then add it to users.json
                            try {
                                Main.createPOI(newPoi);
                            }
                            catch (IOException | ParseException ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
                }
            }

            activeAdding = false;
            jTextPane2.setText("POI Added Successfully!");
            jTextPane2.setEditable(false);
            jButton5.setBackground(new JButton().getBackground());
            jButton4.setBackground(new JButton().getBackground());
            displayPOIinJlist();
            paint(g);
        }
    }

    /**
     * Function to initiate the process of adding a POI
     * Clicking this button allows the user to add a new POI with their next click
     * @param evt MouseEvent that triggers this function
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt){
        jButton2.setBackground(new JButton().getBackground());
        jButton4.setBackground(new Color(255, 251, 0));
        jButton5.setBackground(new JButton().getBackground());
        addingPoi = true;
        jTextPane2.setEditable(true);
        jTextPane2.setText("");
        activeAdding = true;
    }

    /**
     * Function to cancel the action of adding a new POI to the screen
     * @param evt MouseEvent that triggers this function
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt){
        if(activeAdding){
            activeAdding= false;
            addingPoi = false;
            jTextPane2.setEditable(false);
            jTextPane2.setText("            Canceled \n         ");
            jButton5.setBackground( Color.red);
            jButton4.setBackground(new JButton().getBackground());
            paint(g);
        }
    }

    /**
     * Function to draw everything on screen that isn't a Swing component
     * Includes, floor layers and POI images
     * @param g the specified Graphics window
     */
    public void paint(Graphics g) {
        super.paintComponents(g);
        buildings = Main.getBuildings();
        for (Building b: buildings) {
            if (b.getBuildingName().equals(Main.getActiveBuilding())) {
                ArrayList<Floor> floors = b.getFloorList();
                for (Floor f : floors) {
                    if (f.getFloorNumber() == Main.getActiveFloor()) {
                        f.paint(g);
                        ArrayList<POI> pois = f.getPOIs();
                        for (POI p: pois) {
                            if (p.getID() < 2000) p.paintImage(g); //automatically paint default POIs
                            else if (Main.userHasPoi(p)) p.paintImage(g); //only paint this user's POIs
                        }
                    }
                }
            }
        }
    }

    /**
     * Method to run this class individually
     * Only would run for quick testing, no exterior functions available
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuildingMap().setVisible(true);
            }
        });
    }

    /**
     * Apply Graphics2D preferences
     * @param g2d The specified 2d graphics window
     */
    public static void applyQualityRenderingHints(Graphics2D g2d) {
        g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
    }

    // Variables declaration
    private javax.swing.JButton backButton;
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox checkbox2;
    private java.awt.Checkbox checkbox3;
    private java.awt.Checkbox checkbox4;
    private java.awt.Checkbox checkbox5;
    private javax.swing.JButton downButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton FindButton;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton findFav;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JButton upButton;
    // End of variables declaration
}
